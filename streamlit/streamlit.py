import streamlit as st
import pandas as pd
import requests
import json
import time
import mlflow
import os
import shutil
import matplotlib.pyplot as plt
import seaborn as sns
from mlflow import *

from funciones_streamlit import *

col1, colspace, col3 = st.columns([1,3,1])

with col1:
    # Mostrar el logo del gimnasio con un ancho espec√≠fico de 175 p√≠xeles
    st.image(LOGO_GYM, width=175)

with col3:
    # Mostrar el logo del ayuntamiento con un ancho espec√≠fico de 175 p√≠xeles
    st.image(LOGO_AYUNTAMIENTO, width=175)

# Configuraci√≥n de la p√°gina en Streamlit: t√≠tulo y layout
st.set_page_config(page_title="App de Predicci√≥n de Abandono", layout="wide")

# Usar Markdown para centrar el t√≠tulo de la p√°gina y darle color
st.markdown("<h1 style='text-align: center; color: #66BB6A;'>Predicci√≥n de Abandono: CEM Horta Esportiva</h1>", unsafe_allow_html=True)

# Crear una barra de pesta√±as (tabs) para las diferentes opciones de la aplicaci√≥n
tabs = st.tabs([":bar_chart: Abonados con datos inventados", ":id: Un abonado", ":memo: M√∫ltiples abonados", ":mag: Valoraci√≥n modelos"])

# ------------------- #
# TAB 1: Datos individuales
# ------------------- #

with tabs[0]:
    
    # T√≠tulo de la secci√≥n de entrada de datos
    st.markdown("<h2 style='color: #888;'>üìù Datos de Entrada del Abonado</h2>", unsafe_allow_html=True)
    
    # Texto solicitando que se ingresen los datos del abonado para realizar la predicci√≥n
    st.write("Por favor, ingresa los datos del abonado simulado para realizar la predicci√≥n.")

    # Llamada a la funci√≥n input_userdata() para obtener los datos del usuario (esto es un supuesto, la funci√≥n deber√≠a existir)
    userdata = input_userdata()  # Suponiendo que esta funci√≥n obtiene los datos del usuario
    
    st.write('----')

    # T√≠tulo para la secci√≥n de predicci√≥n
    st.markdown("<h3 style='color: #888;'>üîÆ Realizar la predicci√≥n</h3>", unsafe_allow_html=True)

    # Instrucci√≥n para hacer clic en el bot√≥n para realizar la predicci√≥n
    st.write("Haz clic en el bot√≥n para realizar la predicci√≥n.")

    # Bot√≥n para iniciar la predicci√≥n para un abonado inventado
    if st.button("üöÄ Iniciar predicci√≥n para el abonado.", key="btn_individual"):
        
        # Crear un contenedor vac√≠o para el mensaje de "Calculando..."
        calculating_message = st.empty()
        # Mostrar el mensaje de "Calculando..."
        calculating_message.write("Calculando las predicciones de abandono... ")
         # Esperamos un segundo antes de borrar el mensaje
        time.sleep(2)
        # Ahora, tambi√©n borramos el mensaje de "Calculando..."
        calculating_message.empty()
        
        # Crear una lista vac√≠a para almacenar los resultados de la predicci√≥n
        resultados = []

        # Convertir los valores booleanos a True/False, sin cambiar a 1/0
        # Esto se hace para asegurar que el modelo recibe los datos en el formato adecuado (True/False)
        for col in BOOL_COL:
            if col in userdata:
                userdata[col] = True if userdata[col] else False
        
        # Verificar que los datos del usuario contienen todas las columnas necesarias para la predicci√≥n
        required_columns = set(COLUMNAS_MODELO) # Establece las columnas necesarias para el modelo
        
        if not required_columns.issubset(userdata.keys()):  # Si falta alguna columna
            st.error("‚ö†Ô∏è Faltan algunas columnas necesarias.")
        else:
            # Realizar la predicci√≥n
            response = obtener_predicciones_api("predecir_abandono_socio_simulado/", userdata)
            
            # Usamos st.empty() para crear un contenedor vac√≠o
            success_message = st.empty()
            # Mostrar el mensaje de √©xito
            success_message.success("‚úÖ Predicci√≥n obtenida")
            # Esperamos un segundo antes de borrar el mensaje
            time.sleep(1)
            # Borramos el mensaje de √©xito
            success_message.empty()

            # Verificar que la respuesta sea un diccionario (es la forma esperada)            
            if isinstance(response, dict):  # Verifica que la respuesta es un diccionario
                res = response # Almacena la respuesta en la variable 'res'
                res['IdPersona'] = res.get('IdPersona', 'Simulado') # Si no existe 'IdPersona', asigna un valor simulado
                probabilidad = res.get("ProbabilidadAbandono", 0) # Obtiene la probabilidad de abandono (valor por defecto es 0)
                nivel_riesgo = res.get("NivelRiesgo", "Desconocido") # Obtiene el nivel de riesgo (valor por defecto es "Desconocido")
                

                # Verifica que los datos de probabilidad y nivel de riesgo sean v√°lidos
                if probabilidad is not None and nivel_riesgo:

                    # Usar la funci√≥n 'color_con_riesgo' para obtener el color y el nivel de riesgo
                    color, nivel = color_con_riesgo(probabilidad)
                    
                    # Mostrar la probabilidad de abandono y el nivel de riesgo con el color correspondiente
                    st.markdown(
                        f"""
                        <div style='background-color:{color}; padding:10px; border-radius:5px; text-align:center; color:black; font-size:24px'>
                            Probabilidad de abandono: {probabilidad:.2%} (Nivel de Riesgo: {nivel_riesgo})
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:

                    # Si no se encuentra la probabilidad o el nivel de riesgo, mostrar un mensaje de advertencia
                    st.warning("‚ùå No se encontr√≥ informaci√≥n sobre la probabilidad de abandono.")
                
                # Mostrar un espacio vac√≠o para separar secciones
                st.markdown(" ")
                st.markdown("### Lo que impacta en la probabilidad del abonado:")
                st.markdown(" ")

                # Verificar si la respuesta contiene la clave 'Caracter√≠sticasImportantes', que es donde est√°n las variables del modelo
                if "Caracter√≠sticasImportantes" in response:
                    
                    # Llamar a la funci√≥n que prepara el dataframe de las variables m√°s importantes
                    df_top_filtered = preparar_df_importancias(response)
                    
                    # Llamar a la funci√≥n para generar el gr√°fico de barras con las importancias de las variables
                    fig_importancias_abonado = plot_abonado_importancias(df_top_filtered)
                    
                    # Mostrar el gr√°fico generado con Streamlit
                    st.pyplot(fig_importancias_abonado)

                    # Generar un resumen sobre las variables que afectan al riesgo de abandono
                    frase_resumen = generar_frase_resumen(df_top_filtered, nivel)
            
                    # Mostrarla en Streamlit
                    st.markdown(f"**Resumen del riesgo**: {frase_resumen}")

                    
                    # --- 3. Explicaci√≥n del modelo ---
                    st.markdown("")
                
                    # T√≠tulo para la secci√≥n donde se explica el comportamiento del modelo y el riesgo de abandono
                    st.markdown("### Comportamiento del riesgo: ")
                    
                    # Llamada a la funci√≥n que genera la explicaci√≥n detallada de las variables que afectan al riesgo
                    generar_explicacion_contexto(df_top_filtered)

                st.subheader(" ")
                st.subheader("Acci√≥n de fidelizaci√≥n: ")
                
                # --- 4. Estrategias de fidelizaci√≥n ---

                # Obtener el 'IdPersona' del abonado y su 'NivelRiesgo' desde la respuesta de la predicci√≥n
                id_persona = response.get("IdPersona")
                nivel_riesgo = response.get("NivelRiesgo")
    
                # Verificar si el nivel de riesgo est√° en las estrategias de fidelizaci√≥n definidas en ESTRATEGIAS_FIDELIZACION
                if nivel_riesgo in ESTRATEGIAS_FIDELIZACION:

                    # Usar un 'expander' en Streamlit para mostrar las estrategias de fidelizaci√≥n solo si el nivel de riesgo tiene estrategias
                    with st.expander(f"Estrategias de fidelizaci√≥n para el abonado con ID **{id_persona}** (Nivel de Riesgo: {nivel_riesgo})"):
                
                        # Iterar sobre las estrategias disponibles para el nivel de riesgo y mostrarlas con Markdown
                        for estrategia in ESTRATEGIAS_FIDELIZACION[nivel_riesgo]:
                            st.markdown(estrategia)
                    
                    # Mostrar una animaci√≥n de globos (para indicar algo positivo o una acci√≥n exitosa)
                    st.balloons()
                else:
                    # Si no se encontraron estrategias para el nivel de riesgo, mostrar una advertencia
                    st.warning(f"No se encontraron estrategias para el nivel de riesgo: {nivel_riesgo}")   
  
            # Si no se obtuvo una respuesta v√°lida para la predicci√≥n, mostrar un mensaje de error
            else:
                st.warning(f"‚ùå Error en la predicci√≥n para IdPersona simulado")

# ------------------- #
# TAB 1: Un ID
# ------------------- #
with tabs[1]:

    # T√≠tulo para la secci√≥n de predicci√≥n por un abonado
    st.markdown("<h2 style='color: #888;'>Predicci√≥n por un abonado</h2>", unsafe_allow_html=True)

    # Campo para ingresar el ID del abonado (un n√∫mero entero)
    id_persona = st.number_input("Introduce el ID del cliente", min_value=0, step=1)

    st.write('----')

    # Subt√≠tulo para la secci√≥n de predicci√≥n
    st.markdown("<h3 style='color: #888;'>üîÆ Realizar la predicci√≥n</h3>", unsafe_allow_html=True)

    # Instrucciones para el usuario sobre el bot√≥n de predicci√≥n
    st.write("Haz clic en el bot√≥n para realizar la predicci√≥n.") 

    # Bot√≥n que inicia la predicci√≥n cuando es presionado
    if st.button("üöÄ Iniciar predicci√≥n por un abonado", key="btn_id"):
        
        # Crear un contenedor vac√≠o para el mensaje de "Calculando..."
        calculating_message = st.empty()
        # Mostrar el mensaje de "Calculando..."
        calculating_message.write("Calculando las predicciones de abandono... ")
         # Esperamos un segundo antes de borrar el mensaje
        time.sleep(2)
        # Ahora, tambi√©n borramos el mensaje de "Calculando..."
        calculating_message.empty()

        # Crear un diccionario con el ID de la persona que el usuario ha introducido
        data = {"IdPersona": id_persona}

        # Realizar la llamada a la API para obtener la predicci√≥n usando el ID de la persona
        response = obtener_predicciones_api("predecir_abandono_por_id/", data)

        # Si no se obtiene respuesta de la API, mostrar un mensaje de error
        if not response:
            st.error("‚ö†Ô∏è No se obtuvo respuesta de la API.")
        else:
             # Usamos st.empty() para crear un contenedor vac√≠o
            success_message = st.empty()
            # Mostrar el mensaje de √©xito
            success_message.success("‚úÖ Predicci√≥n obtenida")
            # Esperamos un segundo antes de borrar el mensaje
            time.sleep(1)
            # Borramos el mensaje de √©xito
            success_message.empty()

            # Intentar parsear la respuesta si es una cadena JSON (puede ser en formato string)
            try:
                if isinstance(response, str):
                    response = json.loads(response)  # Convertir la respuesta de JSON a un diccionario
            except json.JSONDecodeError as e:
                st.error(f"Error al parsear la respuesta JSON: {e}")
                response = None
            
            # Si la respuesta es v√°lida, continuar con el procesamiento de los datos
            if response:
                # --- 1. Probabilidad de abandono ---
                probabilidad = response.get("ProbabilidadAbandono", 0)   # Obtener la probabilidad de abandono desde la respuesta             

                # Calcular el color y nivel de riesgo basados en la probabilidad
                color, nivel= color_con_riesgo(probabilidad)
            
                # Mostrar la probabilidad de abandono con el color correspondiente
                st.markdown(
                    f"""
                    <div style='background-color:{color}; padding:10px; border-radius:5px; text-align:center; color:black; font-size:24px'>
                        Probabilidad de abandono: {probabilidad:.2%} (Nivel de Riesgo: {nivel})
                    </div>
                    """,
                    unsafe_allow_html=True
                )

                # Separaci√≥n para mejorar la presentaci√≥n
                st.markdown(" ")
                st.markdown("### Lo que impacta en la probabilidad del abonado:")
                st.markdown(" ")
                
                # --- 2. Variables m√°s importantes ---
                # Verificar si la respuesta contiene la clave 'Caracter√≠sticasImportantes' con las variables m√°s relevantes
                if "Caracter√≠sticasImportantes" in response:
                    
                    # Llamar a la funci√≥n que prepara el dataframe de las variables m√°s importantes
                    df_top_filtered = preparar_df_importancias(response)
                    
                    # Generar el gr√°fico de las variables m√°s importantes
                    fig_importancias_abonado = plot_abonado_importancias(df_top_filtered)
                    st.pyplot(fig_importancias_abonado)
                 
                    # Generar una frase resumen con las variables que impactan en el riesgo
                    frase_resumen = generar_frase_resumen(df_top_filtered, nivel)
            
                    # Mostrarla en Streamlit
                    st.markdown(f"**Resumen del riesgo**: {frase_resumen}")                  
 
                    st.markdown("")

                    # T√≠tulo para la secci√≥n de explicaci√≥n del modelo
                    st.markdown("### Comportamiento del riesgo: ")
                    
                    # Llamar a la funci√≥n que genera la explicaci√≥n del comportamiento del riesgo
                    generar_explicacion_contexto(df_top_filtered)

                st.subheader(" ")
                st.subheader("Acci√≥n de fidelizaci√≥n: ")
                
                # --- 4. Estrategias de fidelizaci√≥n ---
                
                # Obtener el ID de la persona y el nivel de riesgo desde la respuesta
                id_persona = response.get("IdPersona")
                nivel_riesgo = response.get("NivelRiesgo")

                # Verificar si el nivel de riesgo tiene estrategias de fidelizaci√≥n definidas
                if nivel_riesgo in ESTRATEGIAS_FIDELIZACION:

                    # Mostrar las estrategias de fidelizaci√≥n en una secci√≥n expandible
                    with st.expander(f"Estrategias de fidelizaci√≥n para el abonado con ID **{id_persona}** (Nivel de Riesgo: {nivel_riesgo})"):
                        for estrategia in ESTRATEGIAS_FIDELIZACION[nivel_riesgo]:
                            st.markdown(estrategia)
                    
                    # Mostrar una animaci√≥n de globos para indicar que se ha completado la acci√≥n
                    st.balloons()

                # Si no existen estrategias para el nivel de riesgo, mostrar un mensaje de advertencia
                else:
                    st.warning(f"No se encontraron estrategias para el nivel de riesgo: {nivel_riesgo}")



# ------------------- #
# TAB 2: M√∫ltiples IDs
# ------------------- #
with tabs[2]:

    # T√≠tulo para la secci√≥n de predicci√≥n por m√∫ltiples abonados
    st.markdown("<h2 style='color: #888;'>Predicci√≥n para m√∫ltiples abonados</h2>", unsafe_allow_html=True)

    # Campo de entrada para que el usuario introduzca una lista de IDs separados por comas
    ids_input = st.text_area("Introduce los diferentes IDs de los abonados, separados por comas", value="123,456,789")

    # Subt√≠tulo para la secci√≥n de predicci√≥n
    st.markdown("<h3 style='color: #888;'>üîÆ Realizar la predicci√≥n</h3>", unsafe_allow_html=True)

    # Instrucciones para el usuario sobre el bot√≥n de predicci√≥n
    st.write("Haz clic en el bot√≥n para realizar la predicci√≥n.")

    # Bot√≥n para iniciar la predicci√≥n para m√∫ltiples abonados
    if st.button("üöÄ Iniciar predicci√≥n por m√∫ltiples abonados", key="btn_ids"):

        # Crear un contenedor vac√≠o para el mensaje de "Calculando..."
        calculating_message = st.empty()
        # Mostrar el mensaje de "Calculando..."
        calculating_message.write("Calculando las predicciones de abandono... ")
         # Esperamos un segundo antes de borrar el mensaje
        time.sleep(2)
        # Ahora, tambi√©n borramos el mensaje de "Calculando..."
        calculating_message.empty()

        try:
            
            # Obtener los IDs de los abonados desde el input del usuario
            # Convertir cada ID a un entero, eliminando cualquier espacio extra
            ids_list = [int(id_.strip()) for id_ in ids_input.split(",") if id_.strip()]
            data = {"Ids": ids_list}
            
            # Obtener la respuesta de la API para la predicci√≥n
            response = obtener_predicciones_api("predecir_abandono_por_ids/", data)
            

            # Si no se obtuvo respuesta de la API, mostrar un mensaje de error
            if not response:
                st.error("‚ö†Ô∏è No se obtuvo respuesta de la API.")
            
            else:
                all_success = True 
                # Procesar cada predicci√≥n de forma independiente
                for prediccion in response:
                    # Verificar si la respuesta contiene alg√∫n error para este ID
                    if "error" in prediccion:  # Si encontramos un error en alguno de los abonados
                        st.error(f"‚ö†Ô∏è El ID {prediccion.get('IdPersona')} no es v√°lido: {prediccion.get('error')}")
                        st.error(f"‚ö†Ô∏è Por favor... ingrese los IDs de los abonadados que existan!")
                        continue  # Continuar con la siguiente predicci√≥n (si la hay)
             
           

                    # Usamos st.empty() para crear un contenedor vac√≠o
                    success_message = st.empty()
                    # Mostrar el mensaje de √©xito
                    success_message.success("‚úÖ Predicci√≥n obtenida")
                    # Esperamos un segundo antes de borrar el mensaje
                    time.sleep(1)
                    # Borramos el mensaje de √©xito
                    success_message.empty()

                
            

                    # Asegurarse de que la predicci√≥n tenga la estructura correcta
                    id_persona = prediccion.get("IdPersona")
                    nivel_riesgo = prediccion.get("NivelRiesgo")
                    
                    st.write("---")
                    st.write(f"### Predicci√≥n para el abonado con ID {id_persona}")

                    # --- 1. Probabilidad de abandono ---
                    probabilidad = prediccion.get("ProbabilidadAbandono", 0)  # Obtener la probabilidad de abandono de la predicci√≥n
                    color, nivel = color_con_riesgo(probabilidad) # Obtener el color y nivel de riesgo seg√∫n la probabilidad
                    
                    st.markdown(
                        f"""
                        <div style='background-color:{color}; padding:10px; border-radius:5px; text-align:center; color:black; font-size:24px'>
                            Probabilidad de abandono: {probabilidad:.2%} (Nivel de Riesgo: {nivel})
                        </div>
                        """,
                        unsafe_allow_html=True)
                    
                    # --- 2. Variables m√°s importantes ---

                    # Verificar si la respuesta contiene las caracter√≠sticas importantes
                    if "Caracter√≠sticasImportantes" in prediccion:

                        df_top_filtered = preparar_df_importancias(prediccion) # Preparar el dataframe de variables importantes
                        fig_importancias_abonado = plot_abonado_importancias(df_top_filtered) # Graficar las variables importantes
                        st.pyplot(fig_importancias_abonado)  # Mostrar el gr√°fico

                        # Generar un resumen de riesgo basado en las variables
                        frase_resumen = generar_frase_resumen(df_top_filtered, nivel)
                        st.markdown(f"**Resumen del riesgo**: {frase_resumen}")

                    # --- 3. Explicaci√≥n del modelo ---
                    # Explicar el comportamiento del riesgo del abonado
                    st.markdown("### Comportamiento del riesgo: ")
                    generar_explicacion_contexto(df_top_filtered) # Llamar a la funci√≥n que genera la explicaci√≥n

                    # --- 4. Estrategias de fidelizaci√≥n ---

                    # Verificar si existen estrategias de fidelizaci√≥n para este nivel de riesgo
                    if nivel_riesgo in ESTRATEGIAS_FIDELIZACION:
                        
                        # Mostrar las estrategias de fidelizaci√≥n en una secci√≥n expandible
                        with st.expander(f"Estrategias de fidelizaci√≥n para el abonado con ID **{id_persona}** (Nivel de Riesgo: {nivel_riesgo})"):
                            for estrategia in ESTRATEGIAS_FIDELIZACION[nivel_riesgo]:
                                st.markdown(estrategia)
                        
                        st.balloons() # Mostrar globos como animaci√≥n
                    else:
                        
                        # Si no existen estrategias, mostrar un mensaje de advertencia
                        st.warning(f"No se encontraron estrategias para el nivel de riesgo: {nivel_riesgo}")
                # Si todas las predicciones fueron exitosas, mostramos el mensaje de √©xito
            if all_success:
                # Usamos st.empty() para crear un contenedor vac√≠o
                success_message = st.empty()
                # Mostrar el mensaje de √©xito
                success_message.success("‚úÖ Predicci√≥n obtenida")
                # Esperamos un segundo antes de borrar el mensaje
                time.sleep(1)
                # Borramos el mensaje de √©xito
                success_message.empty()

        except ValueError:
            # Si el usuario introduce un valor no v√°lido (por ejemplo, letras en lugar de n√∫meros), mostrar un error
            st.error("‚ö†Ô∏è Por favor, introduce solo n√∫meros separados por comas")

# ------------------- #
# TAB 3: Valoraci√≥n
# ------------------- #
with tabs[3]: 
        
        # Leer los archivos de los diferentes experimentos de inferencia
        df_archivo_global_exp3, df_archivo_persona_ex3, df_archivo_preds_ex3 = encontrar_csv_inferencias(NAME_EXPERIMENT_3, FOLDER_DESTINO_3, RUN_ID_INF_3)
        df_archivo_global_exp2, df_archivo_persona_ex2, df_archivo_preds_ex2 = encontrar_csv_inferencias(NAME_EXPERIMENT_2, FOLDER_DESTINO_3, RUN_ID_INF_2)
        df_archivo_global_exp1, df_archivo_persona_ex1, df_archivo_preds_ex1 = encontrar_csv_inferencias(NAME_EXPERIMENT_1, FOLDER_DESTINO_1, RUN_ID_INF_1)

        # Obtener las m√©tricas de rendimiento del modelo para el experimento 3 (AUC, accuracy, F1, recall)
        auc_exp3, accuracy_exp3, f1_exp3, recall_exp3= encontrar_metricas_experimento(NAME_EXPERIMENT_3, metric=METRIC)
        accuracy, auc, f1, recall= encontrar_metricas_inferencia(RUN_ID_INF_3)
        
        # Crear una opci√≥n de radio para que el usuario elija la vista: 'Mostrar modelo entrenado' o 'Mostrar modelo post inferencia'
        view_option = st.radio("Elige la vista:", ("Mostrar modelo entrenado", "Mostrar modelo post inferencia"), horizontal=True)

        # Si el usuario elige 'Mostrar modelo entrenado'
        if view_option == 'Mostrar modelo entrenado':

            # Leer el archivo CSV con el modelo inicial entrenado (archivo con datos hist√≥ricos)
            file_path_inicial = "https://raw.githubusercontent.com/CescBlanco/TFM-FINAL/main/mlops_api/data_mlops_api/dataframe_final_abonado.csv"

            df_modelo_inicial = pd.read_csv(file_path_inicial)
            
            # T√≠tulo y justificaci√≥n del Experimento 1
            st.markdown("<h3 style='color: #888;'>Justificaci√≥n para experimento 1 (No usado):</h3>", unsafe_allow_html=True)
                     
            col1_exp1, col2_exp1 = st.columns(2)

            # Gr√°fico 1: Analizar la variable 'TotalPagadoEconomia' del modelo
            with col1_exp1:
                fig_exp_1= plots_experimentos_sinuso(df_modelo_inicial, 'TotalPagadoEconomia')
                st.pyplot(fig_exp_1)

            # Gr√°fico 2: Mostrar la importancia de las caracter√≠sticas para el experimento 1
            with col2_exp1:
                fig_importnacias_exp1= plot_importancias(df_archivo_global_exp1)
                # Mostrar gr√°fico en Streamlit
                st.pyplot(fig_importnacias_exp1)
            
            st.markdown(' ')
            st.markdown("""
                üßë‚Äçüíªüìä Interpretaci√≥n t√©cnica:
                        
                - A partir de un pago de 600‚Ç¨, la probabilidad de abandono es casi nula.
                - Esto sugiere que el modelo est√° aprendiendo un patr√≥n determinista: si un usuario paga m√°s de 600, se clasifica autom√°ticamente como activo.
                - **`"TotalPagadoEconom√≠a"`**  domina el modelo, dejando de lado otras variables relevantes.
                - Esta dominancia lleva a una clasificaci√≥n sesgada y menos precisa, especialmente para usuarios que pagan menos pero cuyo comportamiento de abandono depende de otros factores.
                - **`Decisi√≥n`** : Se decide eliminar esta variable para evitar el sesgo y permitir que el modelo considere mejor otras variables.        
                         """)

            # Justificaci√≥n del Experimento 2
            st.markdown("<h3 style='color: #888;'>Justificaci√≥n para experimento 2 (No usado):</h3>", unsafe_allow_html=True)
        
            col1_exp2, col2_exp2 = st.columns(2)

            with col1_exp2:

                # Gr√°fico 1: Analizar la variable 'VidaGymMeses' del modelo
                fig_exp_2= plots_experimentos_sinuso(df_modelo_inicial, 'VidaGymMeses')
                st.pyplot(fig_exp_2)
    
            with col2_exp2:

                # Gr√°fico 2: Mostrar la importancia de las caracter√≠sticas para el experimento 2
                fig_importnacias_exp2= plot_importancias(df_archivo_global_exp2)
                # Mostrar gr√°fico en Streamlit
                st.pyplot(fig_importnacias_exp2)

            st.markdown(' ')
            st.markdown("""
                üßë‚Äçüíªüìä Interpretaci√≥n t√©cnica:
                        
                - Los usuarios que abandonan tienden a tener menos meses de suscripci√≥n, mientras que los que permanecen activos tienen m√°s tiempo en el gimnasio.
                - El modelo podr√≠a estar aprendiendo un patr√≥n determinista: si un cliente tiene m√°s de un valor espec√≠fico de meses (aproximadamente 150 meses), se clasifica autom√°ticamente como no abandono.
                - Este patr√≥n podr√≠a hacer que el modelo se sobreajuste, ignorando otras variables importantes.
                - **`Decisi√≥n`**: Se decide prescindir de esta variable para evitar que el modelo dependa de este valor umbral y as√≠ mejorar la inclusi√≥n de otras caracter√≠sticas.        
                """)
    #-----------------------------------------------------------------------------------------------------------------------------------
 
            # Justificaci√≥n para la elecci√≥n del Experimento 3
            st.markdown("<h3 style='color: #888;'>Justificaci√≥n para la elecci√≥n del experimento 3:</h3>", unsafe_allow_html=True)       
            
            # Mostrar las m√©tricas del modelo (AUC, Accuracy, F1, Recall)
            st.markdown(f"""
                Rendimiento del modelo:
                        
                - **`AUC`**: {auc_exp3} ‚Üí Excelente capacidad de distinguir entre quienes se quedan y quienes abandonan.
                - **`Accuracy`**: {accuracy_exp3} ‚Üí Modelo fiable en general.
                - **`F1-score`**: {f1_exp3} ‚Üí Buen equilibrio entre evitar falsos positivos y capturar verdaderos abandonos.
                - **`Recall`**: {recall_exp3} ‚Üí Detecta casi 8 de cada 10 abonados que realmente abandonar√≠an.

                **`Valor de negocio`**: Permite dirigir campa√±as de retenci√≥n de manera efectiva, priorizando a los abonados en riesgo.

                **`Comparativa`**: Este experimento supera a otros modelos porque maximiza la detecci√≥n de abandonos sin generar demasiadas falsas alarmas.
                         """)
            
             #   Visualizaci√≥n de la importancia de las variables para el experimento 3
            st.markdown("<h3 style='color: #888;'>Visualizaci√≥n de la importancia de las variables para el modelo:</h3>", unsafe_allow_html=True)
            
            
            fig_importnacias_exp3= plot_importancias(df_archivo_global_exp3)
            # Mostrar gr√°fico en Streamlit
            st.pyplot(fig_importnacias_exp3)

           
            # Crear un expander (expandir contenido) para mostrar m√°s informaci√≥n t√©cnica
            with st.expander("üîç M√°s informaci√≥n sobre la importancia de variables"):
                
                # **Parte t√©cnica - Data Science:**
                st.markdown("""üßë‚Äçüíªüìä Interpretaci√≥n t√©cnica:""")

                st.markdown("""
                - **`DiasActivo`**: La cantidad de d√≠as que un abonado ha estado activo es la **variable m√°s importante**. Los abonados con menos d√≠as activos tienen una mayor probabilidad de abandonar.
                - **`TotalVisitas`**: La cantidad total de visitas realizadas por un abonado es otro factor crucial. Un abonado que visita con regularidad es menos probable que abandone.
                - **`Edad`**: La edad del abonado tiene una relaci√≥n importante con el abandono. Diferentes rangos de edad podr√≠an tener diferentes comportamientos en cuanto a su lealtad y retenci√≥n.
                - **`VisitasPrimerTrimestre`**: Las visitas en el primer trimestre de la suscripci√≥n son un indicador clave. Un alto n√∫mero de visitas en este periodo podr√≠a predecir una mayor retenci√≥n a largo plazo.
                - **`VisitasUlt180` y `VisitasUlt90`**: Las visitas recientes (√∫ltimos 180 y 90 d√≠as) tambi√©n son importantes. Si un abonado ha estado menos activo recientemente, es m√°s probable que abandone.
                - **`TienePagos`**: El abonado que ha realizado pagos regularmente es menos probable que abandone. Esto podr√≠a indicar un mayor compromiso o satisfacci√≥n con el servicio.
                """)
                st.markdown("""üíºüìà Interpretaci√≥n pr√°ctica de negocio:""")
            
                # **Parte de negocio - Interpretaci√≥n pr√°ctica:**
                st.markdown("""
                - **`DiasActivo`**: Un abonado con pocos d√≠as activos deber√≠a ser un objetivo prioritario para campa√±as de retenci√≥n, ya que es m√°s probable que abandone. Considera ofrecer incentivos para aumentar la actividad.
                - **`TotalVisitas`**: Los abonados con pocas visitas son m√°s propensos a abandonar. Para ellos, una estrategia podr√≠a ser ofrecer promociones de visitas o recordatorios personalizados.
                - **`Edad`**: La edad es una variable importante a tener en cuenta. Dependiendo del grupo de edad, las preferencias y expectativas sobre el servicio pueden variar. Los j√≥venes podr√≠an necesitar una experiencia m√°s din√°mica, mientras que los abonados m√°s mayores podr√≠an estar m√°s interesados en un enfoque centrado en el bienestar.
                - **`VisitasPrimerTrimestre`**: Aprovecha la oportunidad en los primeros tres meses para enganchar a los nuevos abonados con una buena experiencia. Esto aumentar√° las probabilidades de retenci√≥n a largo plazo.
                - **`VisitasUlt180` y `VisitasUlt90`**: Los abonados que no han visitado recientemente podr√≠an estar en riesgo de abandonar. Ofrecer promociones o actividades especiales para reactivar su participaci√≥n puede ser una estrategia clave.
                - **`TienePagos`**: Los abonados que pagan regularmente son menos propensos a abandonar. Tal vez se podr√≠a utilizar esta informaci√≥n para premiar a los abonados m√°s fieles con beneficios exclusivos.
                """)

            st.markdown("<h3 style='color: #888;'>üìù Resumen del visual:</h3>", unsafe_allow_html=True)       


            # Secci√≥n visual con texto resumido
            st.markdown(""" 
            - **Las variables m√°s importantes para predecir el abandono son**:
                - **`DiasActivo`**: El tiempo de actividad del abonado es crucial. Los abonados con menos d√≠as activos tienen mayor probabilidad de abandonar.
                - **`TotalVisitas`**: Un abonado que asiste m√°s al centro est√° menos propenso a abandonar.
                - **`Edaad`**: La edad tambi√©n influye en la probabilidad de abandono. Diferentes rangos de edad podr√≠an tener diferentes comportamientos.
                
                        
            - **Las variables con menor impacto son**:
                - **`Diversidad_servicios_extra`** y **`UsoServiciosExtra`**: Aunque los servicios extra tienen su valor, el comportamiento central (actividad y visitas) es m√°s importante.
            
                        
            - **Conclusiones finales**:
                - **`Mayor compromiso = menor probabilidad de abandono`**: Mantener a los usuarios activos y reactivar a los inactivos es clave.
                - **`Pagos = fuerte predictor de retenci√≥n`**: Incrementar la conversi√≥n a pagos y cuidar la experiencia de los usuarios pagos reduce significativamente el abandono.
                - **`Visitas frecuentes = retenci√≥n`**: Incentivar la actividad continua es clave para mantener a los abonados.
                - **`Usuarios j√≥venes = mayor riesgo`**: Necesitan estrategias de retenci√≥n personalizadas.
                - **`Personalizaci√≥n estacional`**: Promociones seg√∫n preferencias de estaci√≥n pueden mejorar la retenci√≥n, aunque su impacto es menor.
            """)

            st.markdown("<h3 style='color: #888;'> üîë Posible recomendaci√≥n:</h3>", unsafe_allow_html=True)       

            st.markdown("""           
            - **Act√∫a sobre la actividad del abonado**: Aumentar la actividad y la frecuencia de visitas ser√° clave para retener a los abonados.
            - **Segmenta por edad y actividad**: Crea estrategias personalizadas seg√∫n el nivel de actividad y la edad para mejorar la retenci√≥n.
            """)

        # Si el usuario elige 'Mostrar modelo post inferencia'
        elif view_option == 'Mostrar modelo post inferencia':

            # Ruta al archivo CSV que contiene los datos de validaci√≥n post-inferencia
            file_path = 'mlops_api/data_mlops_api/df_validacion_Experimento_v3.csv'

            
            # Leer el archivo CSV de validaci√≥n para obtener los datos post-inferencia
            df_validacion = pd.read_csv(file_path)

            # Mostrar un t√≠tulo para la secci√≥n de inferencia
            st.markdown("<h2 style='color: #999;'>üßë‚Äçüíªüìä Interpretaci√≥n de la inferencia</h2>", unsafe_allow_html=True)

            col1_inf, col2_inf= st.columns(2)

            with col1_inf:
                
                # T√≠tulo para mostrar las m√©tricas de rendimiento del modelo
                st.markdown("<h5 style='color: #888;'>Rendimiento de la validaci√≥n del modelo:</h5>", unsafe_allow_html=True)


                # Mostrar las m√©tricas de rendimiento obtenidas en el modelo post-inferencia
                st.markdown(f"""
                                                
                    - **`AUC`**: {auc} ‚Üí Muy buena capacidad para diferenciar entre abonados que se quedar√°n y los que abandonar√°n.
                    - **`Accuracy`**: {accuracy} ‚Üí Modelo fiable en general.
                    - **`F1-score`**: {f1} ‚Üí Mantiene un buen equilibrio entre precisi√≥n y detecci√≥n de abandonos.
                    - **`Recall`**: {recall} ‚Üí Recall: 84% ‚Üí Detecta m√°s de 8 de cada 10 abonados que realmente abandonar√≠an, mejorando la identificaci√≥n de riesgo frente al entrenamiento.

                    **`Comparativa`**: El modelo mantiene un buen equilibrio entre identificar abandonos y evitar falsas alertas, demostrando robustez tras la validaci√≥n del modelo elegido.
                            """)
          
            # Unir los datos de las predicciones con los datos originales de las personas
            df_persona_exp3 = df_archivo_preds_ex3.merge(df_archivo_persona_ex3, on='IdPersona', how='left')
             # Unir los datos de validaci√≥n con el DataFrame combinado de predicciones y personas
            df_final_persona = pd.merge(df_persona_exp3, df_validacion[['IdPersona', "DiasActivo", "TotalVisitas", 'Edad', "VisitasPrimerTrimestre", "VisitasUlt180",  "TienePagos", "VisitasUlt90",
                                                                   "VisitasUltimoTrimestre", "EstFav_otono", "EstFav_verano"]], on='IdPersona', how='left', suffixes=('', '_inicial'))
           
            
            # Crear el gr√°fico de distribuci√≥n por proporci√≥n de abandono seg√∫n los datos procesados
            with col2_inf:

                st.markdown("<h5 style='color: #888;'>Proporci√≥n de clientes por rango de abandono:</h5>", unsafe_allow_html=True)
                
                # Crear un gr√°fico de pie para mostrar la distribuci√≥n por edad de los clientes
                fig_piechart= piechart_edad(df_final_persona)
                # Mostrar el  en Streamlit
                st.pyplot(fig_piechart)

            col1results,col2results= st.columns(2)
    
            # Funci√≥n que cuenta los resultados de clientes activos y abandonados
            grouped_activos_reset, grouped_abandonados_reset=  tabla_recuento_resultados(df_final_persona)
  
            with col1results: 
                # Mostrar las tablas separadas en Streamlit
                st.markdown("<h3 style='color: #888;'>Clientes Activos:</h3>", unsafe_allow_html=True)
                st.table(grouped_activos_reset)  # Mostrar tabla de clientes activos

            with col2results:
                st.markdown("<h3 style='color: #888;'>Clientes Abandonados:</h3>", unsafe_allow_html=True)
                st.table(grouped_abandonados_reset)  # Mostrar tabla de clientes abandonados
            
            # Mostrar los factores que afectan la probabilidad de abandono
            st.markdown("<h3 style='color: #888;'>Factores que afectan la probabilidad de abandono:</h3>", unsafe_allow_html=True)

            # Llamar a la funci√≥n de categorizaci√≥n de variables de importancia
            df_final_persona= categorizacion_variables_importancia(df_final_persona)
            
            # Crear una lista de opciones para elegir qu√© gr√°fico mostrar
            opciones = [
                "Probabilidad de Abandono por Grupos de Edad",
                "Probabilidad de Abandono por Grupos de D√≠as Activos",
                "Probabilidad de Abandono por Grupos de Visitas √öltimos 180 D√≠as",
                "Probabilidad de Abandono por Visitas Primer Trimestre",
                "Probabilidad de Abandono por Estaci√≥n Favorita Oto√±o",
                "Probabilidad de Abandono por si Tiene Pagos"
            ]

            # Crear un selector para que el usuario elija qu√© gr√°fico quiere ver
            eleccion = st.selectbox("Elige un gr√°fico para ver:", opciones)

            # Llamar a la funci√≥n que muestra el gr√°fico elegido y su descripci√≥n
            mostrar_grafico_y_descripcion(eleccion, df_final_persona)          
           
            
            # T√≠tulo para la secci√≥n de estrategias de fidelizaci√≥n
            st.markdown("<h3 style='color: #888;'>Estrategias de Fidelizaci√≥n:</h3>", unsafe_allow_html=True)
            st.markdown("Selecciona el nivel de riesgo de abandono de los usuarios para ver las estrategias de fidelizaci√≥n recomendadas.")

            

            # Selector para elegir el nivel de riesgo de abandono
            nivel_riesgo = st.selectbox("Selecciona el Nivel de Riesgo:", 
                                        ["Muy Bajo", "Bajo", "Medio", "Alto", "Muy Alto"])

            # Mostrar las estrategias seg√∫n el nivel de riesgo seleccionado
            mostrar_estrategias(nivel_riesgo)

# Agregar un pie de p√°gina con los detalles de contacto
st.markdown("""<footer style='text-align:center; font-size:12px; color:#888;'>
    <p> ¬© 2025 Cesc Blanco | Contacto: <a href='mailto:cesc.blanco98@gmail.com'>cesc.blanco98@gmail.com</a> | 
             S√≠gueme en LinkedIn: <a href='https://www.linkedin.com/in/cescblanco' target='_blank'>LinkedIn</a> </p></footer>""", unsafe_allow_html=True)
