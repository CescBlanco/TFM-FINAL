import streamlit as st
import pandas as pd
import requests
import json
import time
import mlflow
import os
import shutil
import matplotlib.pyplot as plt
import seaborn as sns
from mlflow import *

from funciones_streamlit import *

col1, colspace, col3 = st.columns([1,3,1])

with col1:
    # Mostrar el logo gym
    st.image(LOGO_GYM, width=175)

with col3:
    st.image(LOGO_AYUNTAMIENTO, width=175)
# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="App de Predicci√≥n de Abandono", layout="wide")
# Usar markdown para centrar el t√≠tulo
st.markdown("<h1 style='text-align: center; color: #66BB6A;'>Predicci√≥n de Abandono: CEM Horta Esportiva</h1>", unsafe_allow_html=True)



# Mostrar un breve saludo
#st.subheader("Bienvenido a la herramienta de predicci√≥n de abandono de abonados")


# Tabs para las diferentes opciones
tabs = st.tabs([":bar_chart: Datos inventados", ":id: Un abonado", ":memo: M√∫ltiples abonados", ":mag: Valoraci√≥n modelos"])

# ------------------- #
# TAB 1: Datos individuales
# ------------------- #
with tabs[0]:
    st.markdown("<h2 style='color: #888;'>üìù Datos de Entrada del Abonado</h2>", unsafe_allow_html=True)

    st.write("Por favor, ingresa los datos del abonado para realizar la predicci√≥n.")
    userdata = input_userdata()  # Suponiendo que esta funci√≥n obtiene los datos del usuario
    # Estilo con borde y sombra
    # Secci√≥n de predicci√≥n: claramente diferenciada
    st.write('----')
    st.markdown("<h3 style='color: #888;'>üîÆ Realizar predicci√≥n</h3>", unsafe_allow_html=True)
    st.write("Haz clic en el bot√≥n para realizar la predicci√≥n sobre el abandono del abonado.")

    if st.button("üöÄ Iniciar Predicci√≥n para un abonado inventado", key="btn_individual"):
        st.write("Calculando la predicci√≥n del abandono... ")

        resultados = []
        # Convertir los valores booleanos a True/False, sin cambiar a 1/0
        for col in BOOL_COL:
            if col in userdata:
                userdata[col] = True if userdata[col] else False
        
        # Verificar que los datos del usuario sean completos
        required_columns = set(COLUMNAS_MODELO)
        if not required_columns.issubset(userdata.keys()):
            st.error("‚ö†Ô∏è Faltan algunas columnas necesarias.")
        else:
                # Realizar la predicci√≥n
            response = obtener_predicciones_api("predecir_abandono_socio_simulado/", userdata)
            st.success("‚úÖ Predicci√≥n obtenida")
            st.balloons()  
            if isinstance(response, dict):  # Verifica que la respuesta es un diccionario
                res = response
                res['IdPersona'] = res.get('IdPersona', 'Simulado')  # Asignar un id simulado si no existe
                resultados.append(res)
            else:
                st.warning(f"‚ùå Error en la predicci√≥n para IdPersona simulado")

        # Mostrar los resultados en formato tabla
            df_resultados = pd.DataFrame(resultados)
            if not df_resultados.empty:
                st.write("Resultados de predicci√≥n:")
                df_resultados = df_resultados.rename(columns={
                    'ProbabilidadAbandono': 'Probabilidad de Abandono',
                    'NivelRiesgo': 'Nivel de Riesgo'
                })

                st.dataframe(df_resultados)
             # Verificar si la respuesta es una cadena JSON y convertirla a un diccionario si es necesario
                try:
                    if isinstance(response, str):  # Si es una cadena
                        response = json.loads(response)  # Convertir de JSON a diccionario
                    
                    
                
                except json.JSONDecodeError as e:
                    st.error(f"Error al parsear la respuesta JSON: {e}")
                    

                # Ahora podemos procesar la respuesta
                if isinstance(response, dict):  # Si la respuesta es un diccionario
                    id_persona = response.get("IdPersona")
                    nivel_riesgo = response.get("NivelRiesgo")
                    
                    st.write(f"Nivel de Riesgo para ID {id_persona}: {nivel_riesgo}")

                    # Mostrar las estrategias de fidelizaci√≥n correspondientes al nivel de riesgo
                    if nivel_riesgo in ESTRATEGIAS_FIDELIZACION:
                        with st.expander(f"Estrategias de fidelizaci√≥n para el ID **{id_persona}** (Nivel de Riesgo: {nivel_riesgo})"):
                            for estrategia in ESTRATEGIAS_FIDELIZACION[nivel_riesgo]:
                                st.markdown(estrategia)
                        st.balloons()  
                    else:
                        st.warning(f"No se encontraron estrategias para el nivel de riesgo: {nivel_riesgo}")
                else:
                    st.error("La respuesta no es un diccionario v√°lido.")
            else:
                st.error("‚ö†Ô∏è No se obtuvo respuesta de la API.")
                

# ------------------- #
# TAB 1: Un ID
# ------------------- #
with tabs[1]:

    st.markdown("<h2 style='color: #888;'>Predicci√≥n por un abonado</h2>", unsafe_allow_html=True)
    id_persona = st.number_input("Introduce el ID de la persona", min_value=0, step=1)

    st.write('----')
    st.markdown("<h3 style='color: #888;'>üîÆ Realizar predicci√≥n</h3>", unsafe_allow_html=True)
    st.write("Haz clic en el bot√≥n para realizar la predicci√≥n sobre el abandono del abonado.") 
    import json


    if st.button("üöÄ Iniciar Predicci√≥n por un abonado", key="btn_id"):
        st.write("Calculando la predicci√≥n del abandono... ")
        data = {"IdPersona": id_persona}
        response = obtener_predicciones_api("predecir_abandono_por_id/", data)

        if response:
            st.success("‚úÖ Predicci√≥n obtenida")
           
            st.json(response)  # Mostrar la respuesta para verificar su contenido

            # Verificar si la respuesta es una cadena JSON y convertirla a un diccionario si es necesario
            try:
                if isinstance(response, str):  # Si es una cadena
                    response = json.loads(response)  # Convertir de JSON a diccionario
                              
            except json.JSONDecodeError as e:
                st.error(f"Error al parsear la respuesta JSON: {e}")
                

            # Ahora podemos procesar la respuesta
            if isinstance(response, dict):  # Si la respuesta es un diccionario
                id_persona = response.get("IdPersona")
                nivel_riesgo = response.get("NivelRiesgo")
                
                st.write(f"Nivel de Riesgo para ID {id_persona}: {nivel_riesgo}")

                # Mostrar las estrategias de fidelizaci√≥n correspondientes al nivel de riesgo
                if nivel_riesgo in ESTRATEGIAS_FIDELIZACION:
                    with st.expander(f"Estrategias de fidelizaci√≥n para el abonado con ID **{id_persona}** (Nivel de Riesgo: {nivel_riesgo})"):
                        for estrategia in ESTRATEGIAS_FIDELIZACION[nivel_riesgo]:
                            st.markdown(estrategia)
                    st.balloons()  
                else:
                    st.warning(f"No se encontraron estrategias para el nivel de riesgo: {nivel_riesgo}")
            else:
                st.error("La respuesta no es un diccionario v√°lido.")
        else:
            st.error("‚ö†Ô∏è No se obtuvo respuesta de la API.")

# ------------------- #
# TAB 2: M√∫ltiples IDs
# ------------------- #
with tabs[2]:
    st.markdown("<h2 style='color: #888;'>Predicci√≥n por m√∫ltiples abonados</h2>", unsafe_allow_html=True)

    ids_input = st.text_area("Introduce los IDs de los abonados separados por comas", value="123,456,789")

    st.markdown("<h3 style='color: #888;'>üîÆ Realizar predicci√≥n</h3>", unsafe_allow_html=True)

    st.write("Haz clic en el bot√≥n para realizar la predicci√≥n sobre el abandono del abonado.")

    

    if st.button("üöÄ Iniciar Predicci√≥n por m√∫ltiples abonados", key="btn_ids"):
        st.write("Calculando la predicci√≥n del abandono... ")
        try:
            ids_list = [int(id_.strip()) for id_ in ids_input.split(",") if id_.strip()]
            data = {"Ids": ids_list}
            response = obtener_predicciones_api("predecir_abandono_por_ids/", data)

            if response:
                st.success("‚úÖ Predicciones obtenidas")
               
                st.json(response)  # Mostrar la respuesta para su revisi√≥n

                # Verificar si la respuesta es una cadena JSON y convertirla a un diccionario si es necesario
                try:
                    if isinstance(response, str):  # Si la respuesta es una cadena
                        response = json.loads(response)  # Convertir de JSON a diccionario
                        st.write("Respuesta convertida a diccionario:")  # Mostrar respuesta convertida
                        st.json(response)
                except json.JSONDecodeError as e:
                    st.error(f"Error al parsear la respuesta JSON: {e}")

                # Procesar la respuesta para cada ID
                if isinstance(response, list):  # Si la respuesta es una lista
                    for prediccion in response:
                        # Asegurarse de que la predicci√≥n tenga la estructura correcta
                        id_persona = prediccion.get("IdPersona")
                        nivel_riesgo = prediccion.get("NivelRiesgo")
                        
                        st.write(f"Nivel de Riesgo para ID {id_persona}: {nivel_riesgo}")

                        # Mostrar las estrategias de fidelizaci√≥n correspondientes al nivel de riesgo
                        if nivel_riesgo in ESTRATEGIAS_FIDELIZACION:
                            with st.expander(f"Estrategias de fidelizaci√≥n para el abonado con ID **{id_persona}** (Nivel de Riesgo: {nivel_riesgo})"):
                                for estrategia in ESTRATEGIAS_FIDELIZACION[nivel_riesgo]:
                                    st.markdown(estrategia)
                            st.balloons()  
                        else:
                            st.warning(f"No se encontraron estrategias para el nivel de riesgo: {nivel_riesgo}")
                else:
                    st.error("La respuesta no es una lista v√°lida.")
            else:
                st.error("‚ö†Ô∏è No se obtuvo respuesta de la API.")

        except ValueError:
            st.error("‚ö†Ô∏è Por favor, introduce solo n√∫meros separados por comas")



# ------------------- #
# TAB 3: Valoraci√≥n
# ------------------- #
with tabs[3]: 
        df_archivo_global_exp3, df_archivo_persona_ex3, df_archivo_preds_ex3 = encontrar_csv_inferencias(NAME_EXPERIMENT_3, FOLDER_DESTINO_3, RUN_ID_INF_3)
        df_archivo_global_exp2, df_archivo_persona_ex2, df_archivo_preds_ex2 = encontrar_csv_inferencias(NAME_EXPERIMENT_2, FOLDER_DESTINO_3, RUN_ID_INF_2)
        df_archivo_global_exp1, df_archivo_persona_ex1, df_archivo_preds_ex1 = encontrar_csv_inferencias(NAME_EXPERIMENT_1, FOLDER_DESTINO_1, RUN_ID_INF_1)

        #Encontrar las metricas del modelo usado: Experimento 3 y su inferencia
        auc_exp3, accuracy_exp3, f1_exp3, recall_exp3= encontrar_metricas_experimento(NAME_EXPERIMENT_3, metric=METRIC)
        accuracy, auc, f1, recall= encontrar_metricas_inferencia(RUN_ID_INF_3)
        
        view_option = st.radio("Elige la vista:", ("Mostrar modelo entrenado", "Mostrar modelo post inferencia"), horizontal=True)

        if view_option == 'Mostrar modelo entrenado':
            # Ruta al archivo CSV en tu sistema local
            file_path_inicial = 'mlops_api\data_mlops_api\dataframe_final_abonado.csv'

            # Leer el CSV directamente
            df_modelo_inicial = pd.read_csv(file_path_inicial)
            
            
            st.markdown("<h3 style='color: #888;'>Justificaci√≥n para experimento 1 (No usado):</h3>", unsafe_allow_html=True)
                     
            col1_exp1, col2_exp1 = st.columns(2)

            with col1_exp1:
                fig_exp_1= plots_experimentos_sinuso(df_modelo_inicial, 'TotalPagadoEconomia')
                st.pyplot(fig_exp_1)

            with col2_exp1:
                fig_importnacias_exp1= plot_importancias(df_archivo_global_exp1)
                # Mostrar gr√°fico en Streamlit
                st.pyplot(fig_importnacias_exp1)
            
            st.markdown(' ')
            st.markdown("""
                üßë‚Äçüíªüìä Interpretaci√≥n t√©cnica:
                        
                - A partir de un pago de 600‚Ç¨, la probabilidad de abandono es casi nula.
                - Esto sugiere que el modelo est√° aprendiendo un patr√≥n determinista: si un usuario paga m√°s de 600, se clasifica autom√°ticamente como activo.
                - **`"TotalPagadoEconom√≠a"`**  domina el modelo, dejando de lado otras variables relevantes.
                - Esta dominancia lleva a una clasificaci√≥n sesgada y menos precisa, especialmente para usuarios que pagan menos pero cuyo comportamiento de abandono depende de otros factores.
                - **`Decisi√≥n`** : Se decide eliminar esta variable para evitar el sesgo y permitir que el modelo considere mejor otras variables.        
                         """)

            st.markdown("<h3 style='color: #888;'>Justificaci√≥n para experimento 2 (No usado):</h3>", unsafe_allow_html=True)
        
            col1_exp2, col2_exp2 = st.columns(2)

            with col1_exp2:
                fig_exp_2= plots_experimentos_sinuso(df_modelo_inicial, 'VidaGymMeses')
                st.pyplot(fig_exp_2)
    
            with col2_exp2:
                fig_importnacias_exp2= plot_importancias(df_archivo_global_exp2)
                # Mostrar gr√°fico en Streamlit
                st.pyplot(fig_importnacias_exp2)

            st.markdown(' ')
            st.markdown("""
                üßë‚Äçüíªüìä Interpretaci√≥n t√©cnica:
                        
                - Los usuarios que abandonan tienden a tener menos meses de suscripci√≥n, mientras que los que permanecen activos tienen m√°s tiempo en el gimnasio.
                - El modelo podr√≠a estar aprendiendo un patr√≥n determinista: si un cliente tiene m√°s de un valor espec√≠fico de meses (aproximadamente 150 meses), se clasifica autom√°ticamente como no abandono.
                - Este patr√≥n podr√≠a hacer que el modelo se sobreajuste, ignorando otras variables importantes.
                - **`Decisi√≥n`**: Se decide prescindir de esta variable para evitar que el modelo dependa de este valor umbral y as√≠ mejorar la inclusi√≥n de otras caracter√≠sticas.        
                """)
            
            st.markdown("<h3 style='color: #888;'>Justificaci√≥n para la elecci√≥n del experimento 3:</h3>", unsafe_allow_html=True)       
            
            st.markdown(f"""
                Rendimiento del modelo:
                        
                - **`AUC`**: {auc_exp3} ‚Üí Excelente capacidad de distinguir entre quienes se quedan y quienes abandonan.
                - **`Accuracy`**: {accuracy_exp3} ‚Üí Modelo fiable en general.
                - **`F1-score`**: {f1_exp3} ‚Üí Buen equilibrio entre evitar falsos positivos y capturar verdaderos abandonos.
                - **`Recall`**: {recall_exp3} ‚Üí Detecta casi 8 de cada 10 abonados que realmente abandonar√≠an.

                **`Valor de negocio`**: Permite dirigir campa√±as de retenci√≥n de manera efectiva, priorizando a los abonados en riesgo.

                **`Comparativa`**: Este experimento supera a otros modelos porque maximiza la detecci√≥n de abandonos sin generar demasiadas falsas alarmas.
                         """)
            # Visualizaci√≥n del gr√°fico
            st.markdown("<h3 style='color: #888;'>Visualizaci√≥n de la importancia de las variables para el modelo:</h3>", unsafe_allow_html=True)
            
            
            fig_importnacias_exp3= plot_importancias(df_archivo_global_exp3)
            # Mostrar gr√°fico en Streamlit
            st.pyplot(fig_importnacias_exp3)

           
            # Crear un expnder (spinner) para mostrar m√°s informaci√≥n t√©cnica y de negocio
            with st.expander("üîç M√°s informaci√≥n sobre la importancia de variables"):
                # **Parte t√©cnica - Data Science:**
                st.markdown("""üßë‚Äçüíªüìä Interpretaci√≥n t√©cnica (Data Scientist / Data Analyst):""")

                st.markdown("""
                - **`DiasActivo`**: La cantidad de d√≠as que un abonado ha estado activo es la **variable m√°s importante**. Los abonados con menos d√≠as activos tienen una mayor probabilidad de abandonar.
                - **`TotalVisitas`**: La cantidad total de visitas realizadas por un abonado es otro factor crucial. Un abonado que visita con regularidad es menos probable que abandone.
                - **`Edad`**: La edad del abonado tiene una relaci√≥n importante con el abandono. Diferentes rangos de edad podr√≠an tener diferentes comportamientos en cuanto a su lealtad y retenci√≥n.
                - **`VisitasPrimerTrimestre`**: Las visitas en el primer trimestre de la suscripci√≥n son un indicador clave. Un alto n√∫mero de visitas en este periodo podr√≠a predecir una mayor retenci√≥n a largo plazo.
                - **`VisitasUlt180` y `VisitasUlt90`**: Las visitas recientes (√∫ltimos 180 y 90 d√≠as) tambi√©n son importantes. Si un abonado ha estado menos activo recientemente, es m√°s probable que abandone.
                - **`TienePagos`**: El abonado que ha realizado pagos regularmente es menos probable que abandone. Esto podr√≠a indicar un mayor compromiso o satisfacci√≥n con el servicio.
                """)
                st.markdown("""üíºüìà Interpretaci√≥n pr√°ctica de negocio:""")
            
                # **Parte de negocio - Interpretaci√≥n pr√°ctica:**
                st.markdown("""
                - **`DiasActivo`**: Un abonado con pocos d√≠as activos deber√≠a ser un objetivo prioritario para campa√±as de retenci√≥n, ya que es m√°s probable que abandone. Considera ofrecer incentivos para aumentar la actividad.
                - **`TotalVisitas`**: Los abonados con pocas visitas son m√°s propensos a abandonar. Para ellos, una estrategia podr√≠a ser ofrecer promociones de visitas o recordatorios personalizados.
                - **`Edad`**: La edad es una variable importante a tener en cuenta. Dependiendo del grupo de edad, las preferencias y expectativas sobre el servicio pueden variar. Los j√≥venes podr√≠an necesitar una experiencia m√°s din√°mica, mientras que los abonados m√°s mayores podr√≠an estar m√°s interesados en un enfoque centrado en el bienestar.
                - **`VisitasPrimerTrimestre`**: Aprovecha la oportunidad en los primeros tres meses para enganchar a los nuevos abonados con una buena experiencia. Esto aumentar√° las probabilidades de retenci√≥n a largo plazo.
                - **`VisitasUlt180` y `VisitasUlt90`**: Los abonados que no han visitado recientemente podr√≠an estar en riesgo de abandonar. Ofrecer promociones o actividades especiales para reactivar su participaci√≥n puede ser una estrategia clave.
                - **`TienePagos`**: Los abonados que pagan regularmente son menos propensos a abandonar. Tal vez se podr√≠a utilizar esta informaci√≥n para premiar a los abonados m√°s fieles con beneficios exclusivos.
                """)

            st.markdown("<h3 style='color: #888;'>üìù Resumen del visual:</h3>", unsafe_allow_html=True)       


            # Secci√≥n visual con texto resumido
            st.markdown(""" 
            - **Las variables m√°s importantes para predecir el abandono son**:
                - **`DiasActivo`**: El tiempo de actividad del abonado es crucial. Los abonados con menos d√≠as activos tienen mayor probabilidad de abandonar.
                - **`TotalVisitas`**: Un abonado que asiste m√°s al centro est√° menos propenso a abandonar.
                - **`Edaad`**: La edad tambi√©n influye en la probabilidad de abandono. Diferentes rangos de edad podr√≠an tener diferentes comportamientos.
                
                        
            - **Las variables con menor impacto son**:
                - **`Diversidad_servicios_extra`** y **`UsoServiciosExtra`**: Aunque los servicios extra tienen su valor, el comportamiento central (actividad y visitas) es m√°s importante.
            
                        
            - **Conclusiones finales**:
                - **`Mayor compromiso = menor probabilidad de abandono`**: Mantener a los usuarios activos y reactivar a los inactivos es clave.
                - **`Pagos = fuerte predictor de retenci√≥n`**: Incrementar la conversi√≥n a pagos y cuidar la experiencia de los usuarios pagos reduce significativamente el abandono.
                - **`Visitas frecuentes = retenci√≥n`**: Incentivar la actividad continua es clave para mantener a los abonados.
                - **`Usuarios j√≥venes = mayor riesgo`**: Necesitan estrategias de retenci√≥n personalizadas.
                - **`Personalizaci√≥n estacional`**: Promociones seg√∫n preferencias de estaci√≥n pueden mejorar la retenci√≥n, aunque su impacto es menor.
            """)

            st.markdown("<h3 style='color: #888;'> üîë Posible recomendaci√≥n:</h3>", unsafe_allow_html=True)       

            st.markdown("""           
            - **Act√∫a sobre la actividad del abonado**: Aumentar la actividad y la frecuencia de visitas ser√° clave para retener a los abonados.
            - **Segmenta por edad y actividad**: Crea estrategias personalizadas seg√∫n el nivel de actividad y la edad para mejorar la retenci√≥n.
            """)

        elif view_option == 'Mostrar modelo post inferencia':
            # Ruta al archivo CSV en tu sistema local
            file_path = 'mlops_api/data_mlops_api/df_validacion_Experimento_v3.csv'

            
            # Leer el CSV directamente
            df_validacion = pd.read_csv(file_path)
            st.markdown("<h2 style='color: #999;'>üßë‚Äçüíªüìä Interpretaci√≥n de la inferencia</h2>", unsafe_allow_html=True)

            col1_inf, col2_inf= st.columns(2)

            with col1_inf:
                st.markdown("<h5 style='color: #888;'>Rendimiento de la validaci√≥n del modelo:</h5>", unsafe_allow_html=True)

                st.markdown(f"""
                                                
                    - **`AUC`**: {auc} ‚Üí Muy buena capacidad para diferenciar entre abonados que se quedar√°n y los que abandonar√°n.
                    - **`Accuracy`**: {accuracy} ‚Üí Modelo fiable en general.
                    - **`F1-score`**: {f1} ‚Üí Mantiene un buen equilibrio entre precisi√≥n y detecci√≥n de abandonos.
                    - **`Recall`**: {recall} ‚Üí Detecta casi 8 de cada 10 abonados que realmente abandonar√≠an.Recall: 84% ‚Üí Detecta m√°s de 8 de cada 10 abonados que realmente abandonar√≠an, mejorando la identificaci√≥n de riesgo frente al entrenamiento.

                    **`Comparativa`**: El modelo mantiene un buen equilibrio entre identificar abandonos y evitar falsas alertas, demostrando robustez tras la validaci√≥n del modelo elegido.
                            """)
            

            df_persona_exp3 = df_archivo_preds_ex3.merge(df_archivo_persona_ex3, on='IdPersona', how='left')
            # Unir ambos DataFrames utilizando la columna "IdPersona"
            df_final_persona = pd.merge(df_persona_exp3, df_validacion[['IdPersona', "DiasActivo", "TotalVisitas", 'Edad', "VisitasPrimerTrimestre", "VisitasUlt180",  "TienePagos", "VisitasUlt90",
                                                                   "VisitasUltimoTrimestre", "EstFav_otono", "EstFav_verano"]], on='IdPersona', how='left', suffixes=('', '_inicial'))
           
             # Contar los valores y reordenarlos seg√∫n tu preferencia

            with col2_inf:

                st.markdown("<h5 style='color: #888;'>Proporci√≥n de clientes por rango de abandono:</h5>", unsafe_allow_html=True)
                
                fig_piechart= piechart_edad(df_final_persona)
                # Mostrar el  en Streamlit
                st.pyplot(fig_piechart)

            col1results,col2results= st.columns(2)
           
            grouped_activos_reset, grouped_abandonados_reset=  tabla_recuento_resultados(df_final_persona)
  
            with col1results: 
                # Mostrar las tablas separadas en Streamlit
                st.markdown("<h3 style='color: #888;'>Clientes Activos:</h3>", unsafe_allow_html=True)
                st.table(grouped_activos_reset)  # Mostrar tabla de clientes activos

            with col2results:
                st.markdown("<h3 style='color: #888;'>Clientes Abandonados:</h3>", unsafe_allow_html=True)
                st.table(grouped_abandonados_reset)  # Mostrar tabla de clientes abandonados
            
            st.markdown("<h3 style='color: #888;'>Factores que afectan la probabilidad de abandono:</h3>", unsafe_allow_html=True)

            
            df_final_persona= categorizacion_variables_importancia(df_final_persona)
            
            opciones = [
                "Probabilidad de Abandono por Grupos de Edad",
                "Probabilidad de Abandono por Grupos de D√≠as Activos",
                "Probabilidad de Abandono por Grupos de Visitas √öltimos 180 D√≠as",
                "Probabilidad de Abandono por Visitas Primer Trimestre",
                "Probabilidad de Abandono por Estaci√≥n Favorita Oto√±o",
                "Probabilidad de Abandono por si Tiene Pagos"
            ]

            eleccion = st.selectbox("Elige un gr√°fico para ver:", opciones)

            # Mostrar gr√°fico seg√∫n la selecci√≥n
            mostrar_grafico_y_descripcion(eleccion, df_final_persona)          
           
            
            # T√≠tulo y descripci√≥n
            st.markdown("<h3 style='color: #888;'>Estrategias de Fidelizaci√≥n:</h3>", unsafe_allow_html=True)
            st.markdown("Selecciona el nivel de riesgo de abandono de los usuarios para ver las estrategias de fidelizaci√≥n recomendadas.")

            # Selector de riesgo
            nivel_riesgo = st.selectbox("Selecciona el Nivel de Riesgo:", 
                                        ["Muy Bajo", "Bajo", "Medio", "Alto", "Muy Alto"])

            # Acordeones para cada nivel
            if nivel_riesgo == "Muy Bajo":
                with st.expander("Estrategias de fidelizaci√≥n para **Muy Bajo**"):
                    st.markdown("""
                        1. **`Programa de recompensas por uso continuo`**: Implementar un sistema de puntos para los usuarios frecuentes, que puedan canjear por descuentos, contenido exclusivo o productos premium.
                        2. **`Acceso anticipado a nuevas funcionalidades`**: Los usuarios m√°s activos y pagos pueden ser invitados a probar nuevas funciones antes que el resto de los usuarios. Esto crea un sentido de exclusividad.
                        3. **`Beneficios por referencia`**: Ofrecer recompensas por recomendar la plataforma a amigos o colegas. Esto podr√≠a ser un mes gratis o un descuento para ambos (referente y referido).
                        4. **`Ofertas personalizadas para el perfil de uso`**: Ofrecer descuentos o beneficios exclusivos basados en el comportamiento de uso del cliente. Ejemplo: si un usuario siempre usa una funcionalidad espec√≠fica, enviarle ofertas relacionadas con esa funcionalidad.
                        5. **`Eventos exclusivos en l√≠nea`**: Organizar eventos exclusivos como webinars o reuniones virtuales con expertos, donde solo los usuarios activos o pagos puedan participar.

                    """)

            elif nivel_riesgo == "Bajo":
                with st.expander("Estrategias de fidelizaci√≥n para **Bajo**"):
                    st.markdown("""
                        1. **`Descuentos en renovaci√≥n de suscripci√≥n`**: Ofrecer descuentos significativos si renuevan su suscripci√≥n o realizan pagos adicionales dentro de un corto periodo de tiempo
                        2. **`Campa√±as de retargeting personalizado`**: Utilizar datos de comportamiento para ofrecerles promociones o contenidos personalizados que los inviten a retomar la actividad en la plataforma.
                        3. **`Notificaciones personalizadas con ofertas de valor`**: Enviar recordatorios de productos o funciones que han utilizado previamente, junto con ofertas especiales (ejemplo: "Vuelve y consigue 10% de descuento en tu pr√≥xima compra").
                        4. **`Descuentos por uso frecuente`**: Ofrecer descuentos o recompensas para aquellos usuarios que incrementen su actividad durante el mes (por ejemplo, si usan la plataforma 10 d√≠as consecutivos, obtienen un descuento del 15%).
                        5. **`Recompensas por interacci√≥n con nuevas funciones`**: Incentivar a los usuarios a explorar nuevas caracter√≠sticas de la plataforma ofreciendo un beneficio como un mes adicional de suscripci√≥n o puntos de recompensa.
                    """)

            elif nivel_riesgo == "Medio":
                with st.expander("Estrategias de fidelizaci√≥n para **Medio**"):
                    st.markdown("""
                        1. **`Ofertas de reactivaci√≥n personalizadas`**: Enviar un correo o notificaci√≥n push ofreciendo un descuento importante o acceso a contenido exclusivo si regresan a la plataforma dentro de un plazo determinado.
                        2. **`Recordatorio de funcionalidades no utilizadas`**: Utilizar los datos de comportamiento para enviar mensajes recordando las funcionalidades que no han sido exploradas por el usuario, ofreciendo tutoriales o gu√≠as r√°pidas.
                        3. **`Campa√±as de contenido exclusivo para inactivos`**: Crear un cat√°logo de contenido exclusivo (tutoriales, seminarios web, o art√≠culos premium) disponible solo para aquellos usuarios que regresen despu√©s de un periodo de inactividad.
                        4. **`Ofrecer acceso a nuevas funcionalidades por tiempo limitado`**: Probar nuevas caracter√≠sticas de la plataforma de forma gratuita por un tiempo limitado a usuarios que han estado inactivos durante cierto periodo.
                        5. **`Notificaciones de "√∫ltima oportunidad"`**: Enviar un correo con un asunto como ‚Äú√öltima oportunidad para obtener tus beneficios exclusivos‚Äù, creando un sentido de urgencia.
                    """)

            elif nivel_riesgo == "Alto":
                with st.expander("Estrategias de fidelizaci√≥n para **Alto**"):
                    st.markdown("""
                        1. **`Descuentos en el primer pago`**: Ofrecer descuentos agresivos o promociones de "primer pago gratis" si el usuario completa la conversi√≥n de gratuito a pago (por ejemplo, "Obt√©n un mes gratis si te suscribes ahora").
                        2. **`Llamadas de atenci√≥n personalizadas`**: Contactar directamente con estos usuarios a trav√©s de soporte al cliente o ventas para entender las razones de su baja actividad y ofrecer una soluci√≥n personalizada (por ejemplo, ‚Äú¬øTe gustar√≠a una sesi√≥n de asesoramiento para mejorar tu experiencia?‚Äù).
                        3. **`Oferta de planes flexibles o a medida`**: Crear opciones de pago m√°s flexibles o planes personalizados seg√∫n el uso que hacen los usuarios. Ofrecer un ‚Äúplan b√°sico‚Äù para que comiencen a pagar a bajo costo.
                        4. **`Campa√±as de reactivaci√≥n urgente`**: Ofrecer grandes descuentos (como un 70% de descuento por tres meses) o beneficios adicionales si reactivan su cuenta dentro de las pr√≥ximas 24 horas.
                        5. **`Ofrecer sesiones de soporte o consultor√≠a gratuita`**: Ofrecer sesiones gratuitas con un experto para guiar a los usuarios sobre c√≥mo sacar el m√°ximo provecho de la plataforma.
                    """)

            elif nivel_riesgo == "Muy Alto":
                with st.expander("Estrategias de Fidelizaci√≥n para **Muy Alto**"):
                    st.markdown("""
                        1. **`Campa√±as de recuperaci√≥n con descuentos masivos`**: Ofrecer un descuento profundo como "90% de descuento en el primer mes si te suscribes ahora", para atraerlos a volver, aunque solo sea para probar la plataforma nuevamente.
                        2. **`Encuestas de salida con incentivos`**: Enviar encuestas de salida con una recompensa por completarlas (por ejemplo, ‚Äúdinos por qu√© te vas y recibe un 50% de descuento en tu pr√≥xima compra‚Äù).
                        3. **`Planes gratuitos por tiempo limitado`**: Ofrecer un acceso completo y gratuito por 1 mes a todos los servicios premium, con la intenci√≥n de engancharlos nuevamente a la plataforma.
                        4. **`Comunicaci√≥n directa de recuperaci√≥n (SMS o Llamada)`**: Si es posible, contactar directamente con el usuario por tel√©fono o SMS para entender por qu√© no se est√°n comprometiendo y ofrecer una oferta personalizada.
                        5. **`Experiencia de onboarding personalizada`**: Crear una experiencia de reactivaci√≥n guiada, con contenido paso a paso para que el usuario vuelva a usar la plataforma, mostrando c√≥mo resolver sus puntos de dolor de manera efectiva.
                    """)


st.markdown("""
<footer style='text-align:center; font-size:12px; color:#888;'>
<p>¬© 2025 Cesc Blanco | Contacto: cesc.blanco98@gmail.com | S√≠gueme en LinkedIn: Cesc Blanco Arnau</p>
</footer>
""", unsafe_allow_html=True)

    # st.download_button(
    # label="Descargar CSV",
    # data=archivo,
    # file_name="archivo.csv",
    # mime="text/csv")